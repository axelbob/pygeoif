{
  "name": "cleder/pygeoif",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "",
  "branch": "",
  "style": {
    "name": "Default",
    "componentSet": {
      "nav": "nav/BasicNav",
      "header": "header/BannerHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "-apple-system, BlinkMacSystemFont, sans-serif",
    "fontWeight": 400,
    "bold": 600,
    "lineHeight": 1.5,
    "typeScale": [
      72,
      48,
      24,
      20,
      16,
      14,
      12
    ],
    "monospace": "Menlo, monospace",
    "heading": {
      "fontFamily": null,
      "fontStyle": null,
      "fontWeight": 600,
      "lineHeight": 1.25,
      "textTransform": null,
      "letterSpacing": null
    },
    "h0": {},
    "h1": {},
    "h2": {},
    "h3": {},
    "h4": {},
    "h5": {},
    "h6": {},
    "alternativeText": {},
    "space": [
      0,
      8,
      16,
      32,
      48,
      64,
      96
    ],
    "layout": {
      "maxWidth": 1024,
      "centered": false
    },
    "colors": {
      "text": "#111",
      "background": "#fff",
      "primary": "#08e",
      "secondary": "#059",
      "highlight": "#e08",
      "border": "#ddd",
      "muted": "#eee"
    },
    "border": {
      "width": 1,
      "radius": 2
    },
    "link": {},
    "button": {
      "hover": {
        "boxShadow": "inset 0 0 0 999px rgba(0, 0, 0, .125)"
      }
    },
    "input": {},
    "body": {
      "margin": 0
    },
    "breakpoints": {
      "xs": "@media screen and (max-width:40em)",
      "sm": "@media screen and (min-width:40em)",
      "md": "@media screen and (min-width:52em)",
      "lg": "@media screen and (min-width:64em)"
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "https://github.com/cleder/pygeoif",
          "text": "GitHub"
        }
      ]
    },
    {
      "component": "header",
      "heading": "pygeoif",
      "subhead": "Basic implementation of the __geo_interface__",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "pygeoif: Basic implementation of the __geo_interface__",
          "url": null
        },
        {
          "component": "ui/GithubButton",
          "user": "cleder",
          "repo": "pygeoif"
        }
      ]
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<h1>Introduction</h1>\n<p>PyGeoIf provides a GeoJSON-like protocol for geo-spatial (GIS) vector data.</p>\n<p>see <a href=\"https://gist.github.com/2217756\">https://gist.github.com/2217756</a></p>\n<p>Other Python programs and packages that you may have heard of already\nimplement this protocol:</p>\n<ul>\n<li>ArcPy <a href=\"http://help.arcgis.com/en/arcgisdesktop/\">http://help.arcgis.com/en/arcgisdesktop/</a></li>\n<li>descartes <a href=\"https://bitbucket.org/sgillies/descartes/\">https://bitbucket.org/sgillies/descartes/</a></li>\n<li>geojson <a href=\"http://pypi.python.org/pypi/geojson/\">http://pypi.python.org/pypi/geojson/</a></li>\n<li>PySAL <a href=\"http://pysal.geodacenter.org/\">http://pysal.geodacenter.org/</a></li>\n<li>Shapely <a href=\"https://github.com/Toblerity/Shapely\">https://github.com/Toblerity/Shapely</a></li>\n<li>pyshp <a href=\"https://pypi.python.org/pypi/pyshp\">https://pypi.python.org/pypi/pyshp</a></li>\n</ul>\n<p>So when you want to write your own geospatial library with support\nfor this protocol you may use pygeoif as a starting point and build\nyour functionality on top of it</p>\n<p>You may think of pygeoif as a &apos;shapely ultralight&apos; which lets you\nconstruct geometries and perform <strong>very</strong> basic operations like\nreading and writing geometries from/to WKT, constructing line strings\nout of points, polygons from linear rings, multi polygons from\npolygons, etc. It was inspired by shapely and implements the\ngeometries in a way that when you are familiar with shapely\nyou feel right at home with pygeoif</p>\n<p>It was written to provide clean and python only geometries for\nfastkml_</p>\n<p>.. _fastkml: <a href=\"http://pypi.python.org/pypi/fastkml/\">http://pypi.python.org/pypi/fastkml/</a></p>\n<p>PyGeoIf is continually tested with <em>Travis CI</em></p>\n<p>.. image:: <a href=\"https://api.travis-ci.org/cleder/pygeoif.png\">https://api.travis-ci.org/cleder/pygeoif.png</a>\n    :target: <a href=\"https://travis-ci.org/cleder/pygeoif\">https://travis-ci.org/cleder/pygeoif</a></p>\n<p>.. image:: <a href=\"https://coveralls.io/repos/cleder/pygeoif/badge.png?branch=master\">https://coveralls.io/repos/cleder/pygeoif/badge.png?branch=master</a>\n    :target: <a href=\"https://coveralls.io/r/cleder/pygeoif?branch=master\">https://coveralls.io/r/cleder/pygeoif?branch=master</a></p>\n<h1>Example</h1>\n<pre><span class=\"hljs-meta\">&gt;&gt;</span>&gt; from pygeoif import geometry\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; p = geometry.Point(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; p.__geo_interface_<span class=\"hljs-number\">_</span>\n{<span class=\"hljs-string\">&apos;type&apos;</span>: <span class=\"hljs-string\">&apos;Point&apos;</span>, <span class=\"hljs-string\">&apos;coordinates&apos;</span>: (<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>)}\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; print p\nPOINT (<span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">1.0</span>)\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; p1 = geometry.Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>)\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; l = geometry.LineString([p,p1])\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; l.bounds\n(<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">1.0</span>)\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; dir(l)\n[<span class=\"hljs-string\">&apos;__class__&apos;</span>, <span class=\"hljs-string\">&apos;__delattr__&apos;</span>, <span class=\"hljs-string\">&apos;__dict__&apos;</span>, <span class=\"hljs-string\">&apos;__doc__&apos;</span>, <span class=\"hljs-string\">&apos;__format__&apos;</span>,\n<span class=\"hljs-string\">&apos;__geo_interface__&apos;</span>, <span class=\"hljs-string\">&apos;__getattribute__&apos;</span>, <span class=\"hljs-string\">&apos;__hash__&apos;</span>, <span class=\"hljs-string\">&apos;__init__&apos;</span>,\n<span class=\"hljs-string\">&apos;__module__&apos;</span>, <span class=\"hljs-string\">&apos;__new__&apos;</span>, <span class=\"hljs-string\">&apos;__reduce__&apos;</span>, <span class=\"hljs-string\">&apos;__reduce_ex__&apos;</span>, <span class=\"hljs-string\">&apos;__repr__&apos;</span>,\n<span class=\"hljs-string\">&apos;__setattr__&apos;</span>, <span class=\"hljs-string\">&apos;__sizeof__&apos;</span>, <span class=\"hljs-string\">&apos;__str__&apos;</span>, <span class=\"hljs-string\">&apos;__subclasshook__&apos;</span>,\n<span class=\"hljs-string\">&apos;__weakref__&apos;</span>, <span class=\"hljs-string\">&apos;_coordinates&apos;</span>, <span class=\"hljs-string\">&apos;_geoms&apos;</span>, <span class=\"hljs-string\">&apos;_type&apos;</span>, <span class=\"hljs-string\">&apos;bounds&apos;</span>, <span class=\"hljs-string\">&apos;coords&apos;</span>,\n<span class=\"hljs-string\">&apos;geom_type&apos;</span>, <span class=\"hljs-string\">&apos;geoms&apos;</span>, <span class=\"hljs-string\">&apos;to_wkt&apos;</span>]\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; print l\nLINESTRING (<span class=\"hljs-number\">1.0</span> <span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span>)</pre><p>You find more examples in the\n<code>test_main.py &lt;https://github.com/cleder/pygeoif/blob/master/pygeoif/test_main.py&gt;</code><em>\nfile which cover every aspect of pygeoif or in fastkml</em>.</p>\n<h1>Classes</h1>\n<p>All classes implement the attribute:</p>\n<ul>\n<li><strong>geo_interface</strong>: as dicussed above</li>\n</ul>\n<p>All geometry classes implement the attributes:</p>\n<ul>\n<li>geom_type: Returns a string specifying the Geometry Type of the object</li>\n<li>bounds: Returns a (minx, miny, maxx, maxy) tuple (float values) that bounds the object.</li>\n<li>wkt: Returns the &apos;Well Known Text&apos; representation of the object</li>\n</ul>\n<p>and the method:</p>\n<ul>\n<li>to_wkt which also prints the object</li>\n</ul>\n<h2>GeoObject</h2>\n<p>Base class for Geometry, Feature, and FeatureCollection</p>\n<h2>Geometry</h2>\n<p>Base class for geometry objects. \nInherits from Geoobject.</p>\n<h2>Point</h2>\n<p>A zero dimensional geometry</p>\n<p>A point has zero length and zero area.</p>\n<p>Attributes</p>\n<pre>x, y, z : <span class=\"hljs-attribute\">float</span>\n    Coordinate values\n\nExample\n~~~~~~~~\n\n      &gt;&gt;&gt; <span class=\"hljs-selector-tag\">p</span> = Point(<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">1.0</span>)\n      &gt;&gt;&gt; print <span class=\"hljs-selector-tag\">p</span>\n      POINT (<span class=\"hljs-number\">1.0000000000000000</span> -<span class=\"hljs-number\">1.0000000000000000</span>)\n      &gt;&gt;&gt; <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.y</span>\n      -<span class=\"hljs-number\">1.0</span>\n      &gt;&gt;&gt; <span class=\"hljs-selector-tag\">p</span><span class=\"hljs-selector-class\">.x</span>\n      <span class=\"hljs-number\">1.0</span>\n\n\n\nLineString\n-----------\n\nA one-dimensional <span class=\"hljs-selector-tag\">figure</span> comprising one or more line segments\n\nA LineString has non-zero length and zero area. It may approximate <span class=\"hljs-selector-tag\">a</span> curve\nand need not be straight. Unlike <span class=\"hljs-selector-tag\">a</span> LinearRing, <span class=\"hljs-selector-tag\">a</span> LineString is not closed.\n\nAttributes</pre><p>geoms : sequence\n    A sequence of Points</p>\n<h2>LinearRing</h2>\n<p>A closed one-dimensional geometry comprising one or more line segments</p>\n<p>A LinearRing that crosses itself or touches itself at a single point is\ninvalid and operations on it may fail.</p>\n<p>A Linear Ring is self closing</p>\n<h2>Polygon</h2>\n<p>A two-dimensional figure bounded by a linear ring</p>\n<p>A polygon has a non-zero area. It may have one or more negative-space\n&quot;holes&quot; which are also bounded by linear rings. If any rings cross each\nother, the geometry is invalid and operations on it may fail.</p>\n<p>Attributes</p>\n<pre>\nexterior : LinearRing\n<span class=\"hljs-code\">    The ring which bounds the positive space of the polygon.</span>\ninteriors : sequence\n<span class=\"hljs-code\">    A sequence of rings which bound all existing holes.</span>\n\n\n<span class=\"hljs-section\">MultiPoint\n----------</span>\nA collection of one or more points\n\nAttributes</pre><p>geoms : sequence\n    A sequence of Points</p>\n<h2>MultiLineString</h2>\n<p>A collection of one or more line strings</p>\n<p>A MultiLineString has non-zero length and zero area.</p>\n<p>Attributes</p>\n<pre>\ngeoms : sequence\n<span class=\"hljs-code\">    A sequence of LineStrings</span>\n\n<span class=\"hljs-section\">MultiPolygon\n-------------</span>\n\nA collection of one or more polygons\n\n<span class=\"hljs-section\">Attributes\n~~</span></pre><p>geoms : sequence\n    A sequence of <code>Polygon</code> instances</p>\n<h2>GeometryCollection</h2>\n<p>A heterogenous collection of geometries (Points, LineStrings, LinearRings\nand Polygons)</p>\n<p>Attributes</p>\n<pre>geoms<span class=\"hljs-keyword\"> :</span> sequence\n    A sequence of geometry instances\n\nPlease note:\nGEOMETRYCOLLECTION isn&apos;t supported by the Shapefile format.\nAnd this<span class=\"hljs-built_in\"> sub-class </span>isn&apos;t generally supported by ordinary GIS sw (viewers<span class=\"hljs-built_in\"> and </span>so on).\nSo it&apos;s very rarely used in the real GIS professional world.\n\nExample\n~~~~~~~~\n\n    &gt;&gt;&gt; from pygeoif import geometry\n    &gt;&gt;&gt; p = geometry.Point(1.0, -1.0)\n    &gt;&gt;&gt; p2 = geometry.Point(1.0, -1.0)\n    &gt;&gt;&gt; geoms = [p, p2]\n    &gt;&gt;&gt; c = geometry.GeometryCollection(geoms)\n    &gt;&gt;&gt; c.__geo_interface__\n    {&apos;type&apos;: &apos;GeometryCollection&apos;, &apos;geometries&apos;: [{&apos;type&apos;: &apos;Point&apos;, &apos;coordinates&apos;: (1.0, -1.0)},/\n    {&apos;type&apos;: &apos;Point&apos;, &apos;coordinates&apos;: (1.0, -1.0)}]}\n    &gt;&gt;&gt; [geom for geom in geoms]\n    [Point(1.0, -1.0), Point(1.0, -1.0)]\n\nFeature\n-------\nAggregates a geometry<span class=\"hljs-built_in\"> instance </span>with associated user-defined properties.\n\nAttributes</pre><p>geometry : object\n    A geometry instance\nproperties : dict\n    A dictionary linking field keys with values associated with with geometry instance</p>\n<p>Example</p>\n<pre>\n      &gt;&gt;&gt; <span class=\"hljs-selector-tag\">p</span> = Point(<span class=\"hljs-number\">1.0</span>, -<span class=\"hljs-number\">1.0</span>)\n      &gt;&gt;&gt; props = {<span class=\"hljs-string\">&apos;Name&apos;</span>: <span class=\"hljs-string\">&apos;Sample Point&apos;</span>, <span class=\"hljs-string\">&apos;Other&apos;</span>: <span class=\"hljs-string\">&apos;Other Data&apos;</span>}\n      &gt;&gt;&gt; <span class=\"hljs-selector-tag\">a</span> = Feature(<span class=\"hljs-selector-tag\">p</span>, props)\n      &gt;&gt;&gt; <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.properties</span>\n      {<span class=\"hljs-string\">&apos;Name&apos;</span>: <span class=\"hljs-string\">&apos;Sample Point&apos;</span>, <span class=\"hljs-string\">&apos;Other&apos;</span>: <span class=\"hljs-string\">&apos;Other Data&apos;</span>}\n      &gt;&gt;&gt; <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.properties</span>[<span class=\"hljs-string\">&apos;Name&apos;</span>]\n      <span class=\"hljs-string\">&apos;Sample Point&apos;</span>\n\nFeatureCollection\n-----------------\nA heterogenous collection of Features\n\nAttributes\n~~~</pre><p>features: sequence\n    A sequence of feature instances</p>\n<p>Example\n~~~~</p>\n<pre><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> pygeoif <span class=\"hljs-keyword\">import</span> geometry\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>p = geometry.Point(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>props = {<span class=\"hljs-string\">&apos;Name&apos;</span>: <span class=\"hljs-string\">&apos;Sample Point&apos;</span>, <span class=\"hljs-string\">&apos;Other&apos;</span>: <span class=\"hljs-string\">&apos;Other Data&apos;</span>}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>a = geometry.Feature(p, props)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>p2 = geometry.Point(<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>props2 = {<span class=\"hljs-string\">&apos;Name&apos;</span>: <span class=\"hljs-string\">&apos;Sample Point2&apos;</span>, <span class=\"hljs-string\">&apos;Other&apos;</span>: <span class=\"hljs-string\">&apos;Other Data2&apos;</span>}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>b = geometry.Feature(p2, props2)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>features = [a, b]\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>c = geometry.FeatureCollection(features)\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>c.__geo_interface__\n{<span class=\"hljs-string\">&apos;type&apos;</span>: <span class=\"hljs-string\">&apos;FeatureCollection&apos;</span>, <span class=\"hljs-string\">&apos;features&apos;</span>: [{<span class=\"hljs-string\">&apos;geometry&apos;</span>: {<span class=\"hljs-string\">&apos;type&apos;</span>: <span class=\"hljs-string\">&apos;Point&apos;</span>, <span class=\"hljs-string\">&apos;coordinates&apos;</span>: (<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>)},/\n <span class=\"hljs-string\">&apos;type&apos;</span>: <span class=\"hljs-string\">&apos;Feature&apos;</span>, <span class=\"hljs-string\">&apos;properties&apos;</span>: {<span class=\"hljs-string\">&apos;Other&apos;</span>: <span class=\"hljs-string\">&apos;Other Data&apos;</span>, <span class=\"hljs-string\">&apos;Name&apos;</span>: <span class=\"hljs-string\">&apos;Sample Point&apos;</span>}},/\n {<span class=\"hljs-string\">&apos;geometry&apos;</span>: {<span class=\"hljs-string\">&apos;type&apos;</span>: <span class=\"hljs-string\">&apos;Point&apos;</span>, <span class=\"hljs-string\">&apos;coordinates&apos;</span>: (<span class=\"hljs-number\">1.0</span>, <span class=\"hljs-number\">-1.0</span>)}, <span class=\"hljs-string\">&apos;type&apos;</span>: <span class=\"hljs-string\">&apos;Feature&apos;</span>,/\n <span class=\"hljs-string\">&apos;properties&apos;</span>: {<span class=\"hljs-string\">&apos;Other&apos;</span>: <span class=\"hljs-string\">&apos;Other Data2&apos;</span>, <span class=\"hljs-string\">&apos;Name&apos;</span>: <span class=\"hljs-string\">&apos;Sample Point2&apos;</span>}}]}\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>[feature <span class=\"hljs-keyword\">for</span> feature <span class=\"hljs-keyword\">in</span> c]\n[&lt;Feature Instance Point geometry <span class=\"hljs-number\">2</span> properties&gt;, &lt;Feature Instance Point geometry <span class=\"hljs-number\">2</span> properties&gt;]</pre><h1>Functions</h1>\n<h2>as_shape</h2>\n<p>Create a pygeoif feature from an object that provides the <strong>geo_interface</strong></p>\n<pre><span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> shapely.geometry <span class=\"hljs-keyword\">import</span> Point\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span><span class=\"hljs-keyword\">from</span> pygeoif <span class=\"hljs-keyword\">import</span> geometry\n<span class=\"hljs-meta\">&gt;&gt;&gt; </span>geometry.as_shape(Point(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">0</span>))\n&lt;pygeoif.geometry.Point object at <span class=\"hljs-number\">0</span>x...&gt;</pre><h2>from_wkt</h2>\n<p>Create a geometry from its WKT representation</p>\n<pre><span class=\"hljs-meta\">&gt;&gt;</span>&gt; p = geometry.from_wkt(<span class=\"hljs-string\">&apos;POINT (0 1)&apos;</span>)\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; print p\nPOINT (<span class=\"hljs-number\">0</span>.<span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1.0</span>)</pre><h2>signed_area</h2>\n<p>Return the signed area enclosed by a ring using the linear time\nalgorithm at <a href=\"http://www.cgafaq.info/wiki/Polygon_Area\">http://www.cgafaq.info/wiki/Polygon_Area</a>. A value &gt;= 0\nindicates a counter-clockwise oriented ring.</p>\n<h2>orient</h2>\n<p>Returns a copy of the polygon with exterior in counter-clockwise and\ninteriors in clockwise orientation for sign=1.0 and the other way round\nfor sign=-1.0</p>\n<h2>mapping</h2>\n<p>Returns the <strong>geo_interface</strong> dictionary</p>\n<h1>Development</h1>\n<h2>Installation</h2>\n<p>You can install PyGeoIf from pypi using pip::</p>\n<pre>pip <span class=\"hljs-keyword\">install</span> pygeoif</pre><h2>Testing</h2>\n<p>In order to provide a Travis-CI like testing of the PyGeoIf package during\ndevelopment, you can use tox (<code>pip install tox</code>) to evaluate the tests on\nall supported Python interpreters which you have installed on your system.</p>\n<p>You can run the tests with <code>tox --skip-missin-interpreters</code> and are looking\nfor output similar to the following::</p>\n<pre><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">____ summary __</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span><span class=\"hljs-strong\">_____</span>__\nSKIPPED:  py26: InterpreterNotFound: python2.6\n  py27: commands succeeded\nSKIPPED:  py32: InterpreterNotFound: python3.2\nSKIPPED:  py33: InterpreterNotFound: python3.3\n  py34: commands succeeded\nSKIPPED:  pypy: InterpreterNotFound: pypy\nSKIPPED:  pypy3: InterpreterNotFound: pypy3\n  congratulations :)</pre><p>You are primarily looking for the <code>congratulations :)</code> line at the bottom,\nsignifying that the code is working as expected on all configurations\navailable.</p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/cleder/pygeoif",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/cleder",
          "text": "cleder"
        }
      ]
    }
  ]
}